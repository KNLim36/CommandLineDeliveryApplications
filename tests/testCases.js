const { offers } = require("../model/offer");
const { Package } = require("../model/package");

const TestCases = [
    {
        name: "Valid input number for isNumber function",
        input: { arg1: 700 },
        expectedOutput: true,
        func: "isNumber",
    },
    {
        name: "Invalid input string for isNumber function",
        input: { arg1: "700" },
        expectedOutput: false,
        func: "isNumber",
    },
    {
        name: "Valid base delivery cost input (number)",
        input: { arg1: "base delivery cost", arg2: 300, arg3: true },
        expectedOutput: 300,
        func: "validateNumericInput",
    },
    {
        name: "Valid base delivery cost input (negative number)",
        input: { arg1: "base delivery cost", arg2: -1, arg3: true },
        expectedOutput: -1,
        func: "validateNumericInput",
    },
    {
        name: "Valid base delivery cost input (zero)",
        input: { arg1: "base delivery cost", arg2: 0, arg3: true },
        expectedOutput: 0,
        func: "validateNumericInput",
    },
    {
        name: "Valid base delivery cost input (number with string type)",
        input: { arg1: "base delivery cost", arg2: "100", arg3: true },
        expectedOutput: 100,
        func: "validateNumericInput",
    },
    {
        name: "Valid base delivery cost input (string)",
        input: { arg1: "base delivery cost", arg2: "hello", arg3: true },
        expectedOutput:
            "The provided value for the base delivery cost is invalid. The received value is hello, which is not a valid number.",
        func: "validateNumericInput",
    },
    {
        name: "Valid base delivery cost input (null)",
        input: { arg1: "base delivery cost", arg2: null, arg3: true },
        expectedOutput:
            "The provided value for the base delivery cost is invalid. The received value is null, which is not a valid number.",
        func: "validateNumericInput",
    },
    {
        name: "Valid base delivery cost input (undefined)",
        input: { arg1: "base delivery cost", arg2: undefined, arg3: true },
        expectedOutput:
            "The provided value for the base delivery cost is invalid. The received value is undefined, which is not a valid number.",
        func: "validateNumericInput",
    },
    {
        name: "Valid package weight input (number)",
        input: { arg1: "package weight", arg2: 700, arg3: true },
        expectedOutput: 700,
        func: "validateNumericInput",
    },
    {
        name: "Valid package weight input (number with string type)",
        input: { arg1: "package weight", arg2: "700", arg3: true },
        expectedOutput: 700,
        func: "validateNumericInput",
    },
    {
        name: "Valid package weight input (string)",
        input: { arg1: "package weight", arg2: "hi", arg3: true },
        expectedOutput:
            "The provided value for the package weight is invalid. The received value is hi, which is not a valid number.",
        func: "validateNumericInput",
    },
    {
        name: "Valid delivery cost calculation Sample - 1",
        input: { arg1: 100, arg2: 50, arg3: 30 },
        expectedOutput: 750,
        func: "calculateDeliveryCost",
    },
    {
        name: "Valid delivery cost calculation Sample - 2",
        input: { arg1: 100, arg2: 75, arg3: 125 },
        expectedOutput: 1475,
        func: "calculateDeliveryCost",
    },
    {
        name: "Valid delivery cost calculation Sample - 3",
        input: { arg1: 100, arg2: 175, arg3: 100 },
        expectedOutput: 2350,
        func: "calculateDeliveryCost",
    },
    {
        name: "Valid delivery cost calculation Sample - 4",
        input: { arg1: 100, arg2: 110, arg3: 60 },
        expectedOutput: 1500,
        func: "calculateDeliveryCost",
    },
    {
        name: "Valid delivery cost calculation Sample - 5",
        input: { arg1: 100, arg2: 155, arg3: 95 },
        expectedOutput: 2125,
        func: "calculateDeliveryCost",
    },
    {
        name: "Valid total cost calculation input",
        input: { arg1: 700, arg2: 35 },
        expectedOutput: 665.0,
        func: "calculateTotalCost",
    },
    {
        name: "Validate Offer Code with Valid Inputs",
        input: { arg1: "OFR003", arg2: offers },
        expectedOutput: true,
        func: "isValidOfferCode",
    },
    {
        name: "Process individual package with offer Sample - 1",
        input: {
            arg1: {
                id: "PKG1",
                weight: 5,
                distance: 5,
                offerCode: "OFR001",
            },
            arg2: offers,
            arg3: 100,
            arg4: true,
        },
        expectedOutput: "PKG1 0 175",
        func: "processIndividualPackage",
    },
    {
        name: "Process individual package with offer Sample - 2",
        input: {
            arg1: {
                id: "PKG2",
                weight: 15,
                distance: 5,
                offerCode: "OFR002",
            },
            arg2: offers,
            arg3: 100,
            arg4: true,
        },
        expectedOutput: "PKG2 0 275",
        func: "processIndividualPackage",
    },
    {
        name: "Process individual package with offer Sample - 3",
        input: {
            arg1: {
                id: "PKG3",
                weight: 10,
                distance: 100,
                offerCode: "OFR003",
            },
            arg2: offers,
            arg3: 100,
            arg4: true,
        },
        expectedOutput: "PKG3 35 665",
        func: "processIndividualPackage",
    },
    {
        name: "Process individual package with offer Sample - 4",
        input: {
            arg1: {
                id: "PKG4",
                weight: 110,
                distance: 60,
                offerCode: "OFR002",
            },
            arg2: offers,
            arg3: 100,
            arg4: true,
        },
        expectedOutput: "PKG4 105 1395",
        func: "processIndividualPackage",
    },
    {
        name: "Valid discount amount calculation Sample - 1",
        input: { arg1: 100, arg2: 0.35 },
        expectedOutput: 35,
        func: "calculateDiscountAmount",
    },
    {
        name: "Valid discount amount calculation Sample - 2",
        input: { arg1: 1500, arg2: 0.07 },
        expectedOutput: 105,
        func: "calculateDiscountAmount",
    },
    {
        name: "Valid discount amount calculation Sample - 3",
        input: { arg1: 100, arg2: 0.5 },
        expectedOutput: 50,
        func: "calculateDiscountAmount",
    },
    {
        name: "Valid discount amount calculation Sample - 4",
        input: { arg1: 100, arg2: 0.5 },
        expectedOutput: 50,
        func: "calculateDiscountAmount",
    },
    {
        name: "Valid discount amount calculation Sample - 5",
        input: { arg1: 1000, arg2: 0.025 },
        expectedOutput: 25,
        func: "calculateDiscountAmount",
    },
    {
        name: "Valid discount amount calculation Sample - 6",
        input: { arg1: 100, arg2: 0 },
        expectedOutput: 0,
        func: "calculateDiscountAmount",
    },
    {
        name: "Valid discount amount calculation Sample - 7",
        input: { arg1: 100, arg2: 1 },
        expectedOutput: 100,
        func: "calculateDiscountAmount",
    },
    {
        name: "Generate Shipment - Light then Heavy Packages",
        input: {
            arg1: [
                Package("LightPackage", 20, 100, "NA"),
                Package("HeavyPackage", 200, 10, "NA"),
            ],
            arg2: 220,
            arg3: 70,
            arg4: 0,
        },
        expectedOutput: {
            deliveryDuration: 1.42,
            driverAvailableTime: 2.84,
            driverReturnDuration: 2.84,
            packages: [
                {
                    arrivalTime: 1.42,
                    deliveryDuration: 1.42,
                    departureTime: 0,
                    distance: 100,
                    id: "LightPackage",
                    offerCode: "NA",
                    weight: 20,
                },
                {
                    arrivalTime: 0.14,
                    deliveryDuration: 0.14,
                    departureTime: 0,
                    distance: 10,
                    id: "HeavyPackage",
                    offerCode: "NA",
                    weight: 200,
                },
            ],
            totalWeight: 220,
        },
        func: "createOptimalShipment",
    },
    {
        name: "Generate Shipment - Same Weight, Different Distance Packages",
        input: {
            arg1: [
                Package("Closer package", 50, 10, "NA"),
                Package("Further package", 50.0, 100, "NA"),
            ],
            arg2: 200,
            arg3: 70,
            arg4: 0,
        },
        expectedOutput: {
            deliveryDuration: 1.42,
            driverAvailableTime: 2.84,
            driverReturnDuration: 2.84,
            packages: [
                {
                    arrivalTime: 0.14,
                    deliveryDuration: 0.14,
                    departureTime: 0,
                    distance: 10,
                    id: "Closer package",
                    offerCode: "NA",
                    weight: 50,
                },
                {
                    arrivalTime: 1.42,
                    deliveryDuration: 1.42,
                    departureTime: 0,
                    distance: 100,
                    id: "Further package",
                    offerCode: "NA",
                    weight: 50.0,
                },
            ],
            totalWeight: 100,
        },
        func: "createOptimalShipment",
    },
    {
        name: "Generate Shipment - 125kg max weight",
        input: {
            arg1: [
                Package("Small far package", 10.0, 100, "NA"),

                Package("Small close package", 10, 10, "NA"),
                Package("Medium close package", 100, 10, "NA"),
                Package("Largest far package", 124, 100, "NA"),
            ],
            arg2: 125,
            arg3: 70,
            arg4: 0,
        },
        expectedOutput: {
            deliveryDuration: 1.42,
            driverAvailableTime: 2.84,
            driverReturnDuration: 2.84,
            packages: [
                {
                    arrivalTime: 1.42,
                    deliveryDuration: 1.42,
                    departureTime: 0,
                    distance: 100,
                    id: "Small far package",
                    offerCode: "NA",
                    weight: 10.0,
                },
                {
                    arrivalTime: 0.14,
                    deliveryDuration: 0.14,
                    departureTime: 0,
                    distance: 10,
                    id: "Small close package",
                    offerCode: "NA",
                    weight: 10,
                },
                {
                    arrivalTime: 0.14,
                    deliveryDuration: 0.14,
                    departureTime: 0,
                    distance: 10,
                    id: "Medium close package",
                    offerCode: "NA",
                    weight: 100,
                },
            ],
            totalWeight: 120,
        },
        func: "createOptimalShipment",
    },
    {
        name: "Generate Shipment - Choose 4 out of 6 packages",
        input: {
            arg1: [
                Package("Small close", 10, 10, "NA"),
                Package("Small medium", 10, 50, "NA"),
                Package("Small far", 10.0, 100, "NA"),
                Package("Small super far", 10.0, 300, "NA"),
                Package("Medium close", 100, 10, "NA"),
                Package("Largest far", 124, 100, "NA"),
            ],
            arg2: 125,
            arg3: 70,
            arg4: 0,
        },
        expectedOutput: {
            deliveryDuration: 4.28,
            driverAvailableTime: 8.56,
            driverReturnDuration: 8.56,
            packages: [
                {
                    arrivalTime: 0.14,
                    deliveryDuration: 0.14,
                    departureTime: 0,
                    distance: 10,
                    id: "Small close",
                    offerCode: "NA",
                    weight: 10,
                },
                {
                    arrivalTime: 0.71,
                    deliveryDuration: 0.71,
                    departureTime: 0,
                    distance: 50,
                    id: "Small medium",
                    offerCode: "NA",
                    weight: 10,
                },
                {
                    arrivalTime: 1.42,
                    deliveryDuration: 1.42,
                    departureTime: 0,
                    distance: 100,
                    id: "Small far",
                    offerCode: "NA",
                    weight: 10.0,
                },
                {
                    arrivalTime: 4.28,
                    deliveryDuration: 4.28,
                    departureTime: 0,
                    distance: 300,
                    id: "Small super far",
                    offerCode: "NA",
                    weight: 10.0,
                },
            ],
            totalWeight: 40,
        },
        func: "createOptimalShipment",
    },
    {
        name: "Generate Shipment - Challenge provided example",
        input: {
            arg1: [
                Package("PKG1", 50, 30, "OFR001"),
                Package("PKG2", 75, 125, "OFR008"),
                Package("PKG3", 175, 100, "OFR003"),
                Package("PKG4", 110, 60, "OFR002"),
                Package("PKG5", 155, 95, "NA"),
            ],
            arg2: 200,
            arg3: 70,
            arg4: 10,
        },
        expectedOutput: {
            deliveryDuration: 1.78,
            driverAvailableTime: 13.56,
            driverReturnDuration: 3.56,
            packages: [
                {
                    arrivalTime: 11.78,
                    deliveryDuration: 1.78,
                    departureTime: 10,
                    distance: 125,
                    id: "PKG2",
                    offerCode: "OFR008",
                    weight: 75,
                },
                {
                    arrivalTime: 10.85,
                    deliveryDuration: 0.85,
                    departureTime: 10,
                    distance: 60,
                    id: "PKG4",
                    offerCode: "OFR002",
                    weight: 110,
                },
            ],
            totalWeight: 185,
        },
        func: "createOptimalShipment",
    },
];

const resultEnum = {
    success: "passed",
    failure: "failed",
};

module.exports = {
    TestCases,
    resultEnum,
};
